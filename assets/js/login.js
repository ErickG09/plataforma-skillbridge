// üîπ Importar Firebase SDK
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.3.1/firebase-app.js";
import { 
    getAuth, 
    signInWithEmailAndPassword, 
    sendPasswordResetEmail 
} from "https://www.gstatic.com/firebasejs/11.3.1/firebase-auth.js";
import { 
    getFirestore, 
    collection, 
    query, 
    where, 
    getDocs 
} from "https://www.gstatic.com/firebasejs/11.3.1/firebase-firestore.js";

// üîπ Configuraci√≥n de Firebase
const firebaseConfig = {
    apiKey: "AIzaSyCk8QjypvD96WR2Qj1k0lmeXM-DeSsaLSw",
    authDomain: "bd-skillbridge-platform.firebaseapp.com",
    projectId: "bd-skillbridge-platform",
    storageBucket: "bd-skillbridge-platform.appspot.com",
    messagingSenderId: "965541638734",
    appId: "1:965541638734:web:47f9c5ef524a0940ad891f"
};

// üîπ Inicializar Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

console.log("‚úÖ Firebase inicializado correctamente");

// üîπ Elementos del DOM
const loginForm = document.getElementById("login-form");
const matriculaInput = document.getElementById("matricula");
const passwordInput = document.getElementById("password");
const errorMessage = document.getElementById("error-message");
const forgotPasswordButton = document.getElementById("forgot-password");

// ‚úÖ INICIAR SESI√ìN CON MATR√çCULA Y CONTRASE√ëA
if (loginForm) {
    loginForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const matricula = matriculaInput.value.trim();
        const password = passwordInput.value.trim();

        if (!matricula || !password) {
            showErrorMessage("‚ö†Ô∏è Por favor, completa todos los campos.");
            return;
        }

        try {
            console.log(`üîç Buscando usuario con matr√≠cula: ${matricula}`);

            // üîπ Buscar usuario en Firestore por matr√≠cula
            const usersRef = collection(db, "users");
            const q = query(usersRef, where("matricula", "==", matricula));
            const querySnapshot = await getDocs(q);

            if (querySnapshot.empty) {
                showErrorMessage("‚ùå Matr√≠cula no encontrada. Verifica con el administrador.");
                return;
            }

            let userData;
            let userId;
            querySnapshot.forEach((doc) => {
                userData = doc.data();
                userId = doc.id;
            });

            if (!userData.email) {
                showErrorMessage("‚ùå Error: No se encontr√≥ un email vinculado a esta matr√≠cula.");
                return;
            }

            console.log(`üì© Usuario encontrado: ${userData.email}`);

            // üîπ Intentar iniciar sesi√≥n con el email y la contrase√±a
            await signInWithEmailAndPassword(auth, userData.email, password);

            // ‚úÖ Inicio de sesi√≥n exitoso
            console.log(`‚úÖ Usuario autenticado: ${userData.email}`);
            showSuccessMessage("‚úÖ Inicio de sesi√≥n exitoso. Redirigiendo...");

            // Guardar el nombre del usuario en localStorage para futuras p√°ginas
            localStorage.setItem("username", userData.name);

            setTimeout(() => {
                window.location.href = "platform.html";
            }, 1500);
        } catch (error) {
            console.error("‚ùå Error al iniciar sesi√≥n:", error);

            if (error.code === "permission-denied") {
                showErrorMessage("üö´ No tienes permisos suficientes para iniciar sesi√≥n. Verifica con el administrador.");
            } else if (error.code === "auth/wrong-password") {
                showErrorMessage("‚ùå Contrase√±a incorrecta. Intenta de nuevo.");
            } else if (error.code === "auth/user-not-found") {
                showErrorMessage("‚ùå Usuario no encontrado. Verifica tu matr√≠cula.");
            } else {
                showErrorMessage("‚ùå Error al iniciar sesi√≥n. Int√©ntalo de nuevo.");
            }
        }
    });

    // ‚úÖ Limpiar mensaje de error cuando el usuario empieza a escribir
    matriculaInput.addEventListener("input", clearErrorMessage);
    passwordInput.addEventListener("input", clearErrorMessage);
}

// ‚úÖ FUNCI√ìN PARA RESTABLECER CONTRASE√ëA
if (forgotPasswordButton) {
    forgotPasswordButton.addEventListener("click", async () => {
        const email = prompt("‚úâÔ∏è Ingresa tu correo electr√≥nico para restablecer la contrase√±a:");
        if (!email) return;

        try {
            await sendPasswordResetEmail(auth, email);
            showSuccessMessage("‚úÖ Correo de recuperaci√≥n enviado. Revisa tu bandeja de entrada.");
        } catch (error) {
            console.error("‚ùå Error al enviar el correo de recuperaci√≥n:", error);
            showErrorMessage("‚ùå No se pudo enviar el correo de recuperaci√≥n. Verifica tu email.");
        }
    });
}

// ‚úÖ FUNCI√ìN PARA MOSTRAR MENSAJES DE ERROR
function showErrorMessage(message) {
    errorMessage.innerHTML = `<p>${message}</p>`;
    errorMessage.classList.add("error-message");
    errorMessage.style.display = "block";
}

// ‚úÖ FUNCI√ìN PARA MOSTRAR MENSAJE DE √âXITO
function showSuccessMessage(message) {
    errorMessage.innerHTML = `<p>${message}</p>`;
    errorMessage.classList.remove("error-message");
    errorMessage.classList.add("success-message");
    errorMessage.style.display = "block";
}

// ‚úÖ FUNCI√ìN PARA LIMPIAR MENSAJES DE ERROR CUANDO EL USUARIO EDITA LOS CAMPOS
function clearErrorMessage() {
    errorMessage.style.display = "none";
}
